from Crypto.Util.number import bytes_to_long

FLAG = b'grey{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}'

n = len(FLAG)

m1 = bytes_to_long(FLAG[:n//2])
m2 = bytes_to_long(FLAG[n//2:])


a = "6561821624691895712873377320063570390939946639950635657527777521426768466359662578427758969698096016398495828220393137128357364447572051249538433588995498109880402036738005670285022506692856341252251274655224436746803335217986355992318039808507702082316654369455481303417210113572142828110728548334885189082445291316883426955606971188107523623884530298462454231862166009036435034774889739219596825015869438262395817426235839741851623674273735589636463917543863676226839118150365571855933"
b = "168725889275386139859700168943249101327257707329805276301218500736697949839905039567802183739628415354469703740912207864678244970740311284556651190183619972501596417428866492657881943832362353527907371181900970981198570814739390259973631366272137756472209930619950549930165174231791691947733834860756308354192163106517240627845889335379340460495043"

def verify_flag(flag):
    m1 = bytes_to_long(flag[:n//2])
    m2 = bytes_to_long(flag[n//2:])
    temp = str(13 * m2 ** 2 + m1 * m2 + 5 * m1 ** 7)
    count_a = 0
    for i in range(len(a)):
        if a[i] == temp[i]:
            count_a += 1
        else:
            break 
    
    count_b = 0
    for i in range(len(a)):
        if a[i] == temp[i]:
            count_b += 1
        else:
            break 
    return count_b, count_a

def solve_flag(flag, index, record):
    if index == n - 1:
        return [flag]

    candidate_max_flags = []
    candidate_max_count = (0, 0)

    for i in range(33, 127):
        possible_flag_prefix = flag[:index] + str(chr(i)).encode() + flag[index + 1:]
        count = verify_flag(possible_flag_prefix)
        if count > record:
            possible_flags = solve_flag(possible_flag_prefix, index + 1, count)
            if possible_flags:
                for possible_flag in possible_flags:
                    count = verify_flag(possible_flag)
                    if count > candidate_max_count:
                        candidate_max_flags = [possible_flag]
                        candidate_max_count = count
                    elif count == candidate_max_count: 
                        candidate_max_flags.append(possible_flag)
    
    return candidate_max_flags


print(solve_flag(FLAG, 5, verify_flag(FLAG)))
# 13 * m2 ** 2 + m1 * m2 + 5 * m1 ** 7 == 6561821624691895712873377320063570390939946639950635657527777521426768466359662578427758969698096016398495828220393137128357364447572051249538433588995498109880402036738005670285022506692856341252251274655224436746803335217986355992318039808507702082316654369455481303417210113572142828110728548334885189082445291316883426955606971188107523623884530298462454231862166009036435034774889739219596825015869438262395817426235839741851623674273735589636463917543863676226839118150365571855933
# 7 * m2 ** 3 + m1 ** 5 == 168725889275386139859700168943249101327257707329805276301218500736697949839905039567802183739628415354469703740912207864678244970740311284556651190183619972501596417428866492657881943832362353527907371181900970981198570814739390259973631366272137756472209930619950549930165174231791691947733834860756308354192163106517240627845889335379340460495043